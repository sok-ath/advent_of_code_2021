###### problem 8

aoc8 <- read.csv("...")

a8_col <- aoc8 %>%
  separate(raw_input, c("i0", "i1", "i2", "i3", "i4", "i5", "i6", "i7", "i8", "i9", "o0", "o1", "o2", "o3"))

# how many times do 1, 4, 7, and 8 appear in the output columns? (o0:o3)
# the trick is: these numbers have a distinct number of characters
# 1 is 2, 7 is 3, 4 is 4, 8 is 7
# so i can do a pretty str8forward mutate and count op:

a8_col %>%
  mutate(count_0 = ifelse(nchar(o0) %in% c(2,3,4,7), 1, 0),
         count_1 = ifelse(nchar(o1) %in% c(2,3,4,7), 1, 0),
         count_2 = ifelse(nchar(o2) %in% c(2,3,4,7), 1, 0),
         count_3 = ifelse(nchar(o3) %in% c(2,3,4,7), 1, 0)) %>%
  summarise(s0 = sum(count_0),
            s1 = sum(count_1),
            s2 = sum(count_2),
            s3 = sum(count_3),
            tot = s0 + s1 + s2 + s3)

### part 2

# 2-havers: 1
# 3-havers: 7
# 4-havers: 4
# 5-havers: 2, 3, 5
# 6-havers: 0, 6, 9
# 7-havers: 8

# 1, 4, 7, and 8 are all knowable from string length

# 3 will have nchar() = 5 AND include both letters in 1
# 9 will have nchar() = 6 and all letters in 3
# 5 will have nchar() = 5 and the character in 9 but not in 3
# 2 will be the last-remaining nchar() = 5
# 6 will be the nchar() = 6 which doesn't have both characters in 1
# 0 will be the last-remaining nchar() = 6

# a useful capability will be having all strings in alphabetical order:
# https://gist.github.com/martinctc/56b3fb701a182f5b8dffceecd65b6d86

str_arrange <- function(x){
  x %>%
    stringr::str_split("") %>% # Split string into letters
    purrr::map(~sort(.) %>% paste(collapse = "")) %>% # Sort and re-combine
    as_vector() # Convert list into vector
}

a8_s <- a8_col %>% mutate_all(str_arrange)

a8_s$row_index <- seq(1, nrow(a8_s), 1)

a8_ss <- a8_s %>%
  select(-o0, -o1, -o2, -o3)

a8ssm <- reshape2::melt(a8_ss, id.vars = c("row_index")) %>%
  arrange(row_index, variable)

# what does a solution look like here?
# need a key that says: index, value, letter

a8ssm$nchar <- nchar(a8ssm$value)

a8ssm$decoded <- with(a8ssm,
                      ifelse(nchar(value) == 2, 1,
                             ifelse(nchar(value) == 3, 7,
                                    ifelse(nchar(value) == 4, 4,
                                           ifelse(nchar(value) == 7, 8,
                                                  999)))))

# figure out 3 as the nchar() = 5 with both characters in 1

sub_1 <- filter(a8ssm, decoded == 1)

a8ssm <- sqldf("
                SELECT
                  a8ssm.*,
                    sub_1.value AS pattern_1
                FROM a8ssm
                    JOIN sub_1 ON sub_1.row_index = a8ssm.row_index
               ")

a8ssm <- a8ssm %>%
  rowwise() %>%
  mutate(decoded = ifelse(decoded != 999, decoded,
                          ifelse(nchar == 5 & 
                                   grepl(substr(pattern_1, 1, 1), value, fixed = TRUE) == TRUE &
                                   grepl(substr(pattern_1, 2, 2), value, fixed = TRUE) == TRUE, 3, decoded)))

# solve for 9

sub_3 <- filter(a8ssm, decoded == 3)

a8ssm <- sqldf("
                SELECT
                  a8ssm.*,
                    sub_3.value AS pattern_3
                FROM a8ssm
                    JOIN sub_3 ON sub_3.row_index = a8ssm.row_index
               ")

a8ssm <- a8ssm %>%
  rowwise() %>%
  mutate(decoded = ifelse(decoded != 999, decoded,
                          ifelse(nchar == 6 & 
                                   grepl(substr(pattern_3, 1, 1), value, fixed = TRUE) == TRUE &
                                   grepl(substr(pattern_3, 2, 2), value, fixed = TRUE) == TRUE &
                                   grepl(substr(pattern_3, 3, 3), value, fixed = TRUE) == TRUE &
                                   grepl(substr(pattern_3, 4, 4), value, fixed = TRUE) == TRUE &
                                   grepl(substr(pattern_3, 5, 5), value, fixed = TRUE) == TRUE, 
                                 9, decoded)))

# solve for 5 and 2
# 5 will have nchar() = 5 and the character in 9 but not in 3
# 2 will be left over

sub_9 <- filter(a8ssm, decoded == 9)

a8ssm <- sqldf("
                SELECT
                  a8ssm.*,
                    sub_9.value AS pattern_9
                FROM a8ssm
                    JOIN sub_9 ON sub_9.row_index = a8ssm.row_index
               ")

a8ssm <- a8ssm %>%
  rowwise() %>%
  mutate(nine_less_3 = setdiff(strsplit(pattern_9,"")[[1]],strsplit(pattern_3,"")[[1]]))

head(a8ssm)

a8ssm <- a8ssm %>%
  rowwise() %>%
  mutate(decoded = ifelse(decoded != 999, decoded,
                          ifelse(nchar == 5 & grepl(substr(nine_less_3, 1, 1), value, fixed = TRUE) == TRUE, 5, 
                                 ifelse(nchar == 5, 2, decoded))))

# solve for 6 and 0
# 6 will be the nchar() = 6 which doesn't have both characters in 1
# 0 will be the last-remaining nchar() = 6

head(a8ssm)

a8ssm <- a8ssm %>%
  rowwise() %>%
  mutate(decoded = ifelse(decoded != 999, decoded,
                          ifelse(nchar == 6 & 
                                   (  grepl(substr(pattern_1, 1, 1), value, fixed = TRUE) == FALSE |
                                      grepl(substr(pattern_1, 2, 2), value, fixed = TRUE) == FALSE  ), 6, 0)))

# now assemble the answer set

head(a8ssm)

a8_as <- a8_s %>%
  select(row_index, o0, o1, o2, o3)

a8_asm <- reshape2::melt(a8_as, id.vars = c("row_index"))

a8_asm_v <- sqldf("
                      SELECT
                        aas.*,
                          a8.decoded
                      FROM a8_asm aas
                          JOIN a8ssm a8 ON (a8.row_index = aas.row_index AND a8.value = aas.value)
                  ")

# pivot this back wide such that it's easier to paste0 the nubmers back together

a8w <- a8_asm_v %>% 
  select(-value) %>%
  pivot_wider(names_from = variable, values_from = decoded) %>%
  mutate(concat_code = as.numeric(paste0(o0, o1, o2, o3))) 

sum(a8w$concat_code)
